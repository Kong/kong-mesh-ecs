AWSTemplateFormatVersion: "2010-09-09"
Description: VPC and ECS cluster stack
Parameters:
  TLD:
    Type: String
    Default: kongmesh
    Description: Internal TLD for Kuma mesh
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public:
      CIDR: "10.0.0.0/24"
    Public2:
      CIDR: "10.0.1.0/24"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]

  # Two public subnets (we need at least 2 for Aurora)
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: AWS::Region }
      VpcId: !Ref "VPC"
      CidrBlock: !FindInMap [SubnetConfig, Public, CIDR]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: AWS::Region }
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, Public2, CIDR]
      MapPublicIpOnLaunch: true

  # Containers in the public subnets have public IP addresses and
  # the routing table sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # This LoadBalancer handles requests to the control plane
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: network
      Subnets:
        - !Ref PublicSubnet
    DependsOn: PublicRoute

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster

  # A security group for the containers we will run in Fargate.
  # A rule, allowing network traffic from other members of the
  # security group.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VPC
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"
                Resource: "*"

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Allow services to be discovered at *.kongmesh
  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref TLD
      Vpc: !Ref VPC

  MyPrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: mesh.local
      HostedZoneConfig:
        Comment: "Private hosted zone for internal services mesh"
      VPCs:
        - VPCId: !Ref "VPC"
          VPCRegion: !Ref AWS::Region

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Join [":", [!Ref AWS::StackName, ClusterName]]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt ECSRole.Arn
    Export:
      Name: !Join [":", [!Ref AWS::StackName, ECSRole]]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Join [":", [!Ref AWS::StackName, ECSTaskExecutionRole]]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref "VPC"
    Export:
      Name: !Join [":", [!Ref AWS::StackName, VPCId]]
  PublicSubnet:
    Description: Public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Join [":", [!Ref AWS::StackName, PublicSubnet]]
  PublicSubnet2:
    Description: Public subnet
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [":", [!Ref AWS::StackName, PublicSubnet2]]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref FargateContainerSecurityGroup
    Export:
      Name: !Join [":", [!Ref AWS::StackName, FargateContainerSecurityGroup]]
  PrivateNamespace:
    Description: Private namespace
    Value: !Ref PrivateNamespace
    Export:
      Name: !Join [":", [!Ref AWS::StackName, PrivateNamespace]]
  LoadBalancer:
    Description: The control plane load balancer
    Value: !Ref LoadBalancer
    Export:
      Name: !Join [":", [!Ref AWS::StackName, LoadBalancer]]
  ExternalCPAddress:
    Description: Address of the control plane load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Join [":", [!Ref AWS::StackName, ExternalCPAddress]]
  TLD:
    Description: Internal TLD for Kuma mesh
    Value: !Ref TLD
    Export:
      Name: !Join [":", [!Ref AWS::StackName, TLD]]
  HostedZoneId:
    Description: The ID of the hosted zone
    Value: !Ref "MyPrivateHostedZone"
    Export:
      Name: !Join [":", [!Ref AWS::StackName, HostedZoneId]]
